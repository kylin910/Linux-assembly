程序描述：
计算ffff:0~ffff:b单元中的数据的和，结果存储在dx中
分析：
1）运算后的结果是否会超出dx所能存储的范围？
ffff:0~ffff:b内存单元中的数据是字节型数据，范围在0~255之间，12个这样的数据相加，结果不会大于65535,可以在dx中存放下。
2）我们能否将ffff:0~ffff:b中的数据直接累加到dx中？
当然不行，因为ffff:0~ffff:b中的数据是8位的，不能直接加到16位寄存器dx中。
3）我们能否将ffff:0~ffff:b中的数据累加到dl中，并设置(dh)=0,从而实现累加到dx中？
这也不行，因为dl是8位寄存器，能容纳的数据的范围在0~255之间，ffff:0~ffff:b中的数据也都是8位，如果仅向dl中累加12个8位数据，很有可能造成进位丢失。
4）我们到底怎样将ffff:0~ffff:b中的8位数据，累加到16位寄存器dx中？
从上面的分析中，可以看到，这里面有两个问题：类型的匹配和结果的不超界。具体的说，就是在做加法的时候，我们有两种方法：
（1）（dx）=（dx）+内存中的8位数据；
（2）（dl）=（dl）+内存中的8位数据
第一种方法中的问题是两个运算对象的类型不匹配，第二种方法中的问题是结果有可能超界。
怎样能解决两个看似矛盾的问题？目前的方法就是得用一个16位寄存器来做中介。将内存单元中的8位数据赋值到一个16位寄存器ax中，再将ax中的数据加到dx上，从而使两个
运算对象的类型匹配并且结果不会超界。
